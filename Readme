**//This is the Link for my Video Walk Through//**
https://www.dropbox.com/scl/fi/uzpc44ou9mob3jz4hluby/Walmart-Countries-App-Made-with-Clipchamp.mp4?rlkey=kk7ctex928gws95tj09w9mc6y&st=fl6uszn9&dl=0

<video src="https://www.dropbox.com/scl/fi/uzpc44ou9mob3jz4hluby/Walmart-Countries-App-Made-with-Clipchamp.mp4?rlkey=kk7ctex928gws95tj09w9mc6y&st=fl6uszn9&dl=0
"></video>

# Countries List App

## Overview

This Android application fetches and displays  all the countries in a RecyclerView ordered by the position they appear in the JSON.
The app uses the MVVM architecture with data binding, Retrofit for networking, and custom exception handling to ensure robustness.

## Architecture

The app follows the Model-View-ViewModel (MVVM) architecture:

*   **Model:** `Country` data class to represent each country.
*   **View:** `MainActivity`, RecyclerView, and related layout files. Responsible for displaying data and handling user interactions.
*   **ViewModel:** `CountryViewModel`.  Provides data to the UI and handles business logic.
*   **Repository:** `CountryRepository` - Handles fetching data from the API.

## Technologies Used

*   **Kotlin:** Primary programming language.
*   **Android SDK:** For building the Android application.
*   **Retrofit:** For making network requests to fetch data from the API.
*   **Gson:** For parsing JSON data.
*   **Data Binding:** For binding data to the UI elements.
*   **LiveData:** For observing data changes in the UI.
*   **ViewModel:** For managing UI-related data in a lifecycle-conscious way.
*   **Coroutines:** For handling asynchronous tasks.
*   **JUnit and Mockito:** For unit testing.
*   **RecyclerView:** For displaying the list of countries.

## Setup Instructions

1.  **Clone the repository:**

    ```
    git clone [repository URL]
    ```

2.  **Open the project in Android Studio.**

3.  **Add dependencies:**
    Make sure you have the dependencies in your `build.gradle` (app level) file:


4.  **Enable Data Binding:**
    Add the following to your `build.gradle` file inside the `android` block:

    ```
    android {
       ...
       buildFeatures {
           dataBinding true
           viewBinding true
       }
    }
    ```

5.  **Build and Run the App:**
    Click the "Run" button in Android Studio to build and run the app on an emulator or a physical device.

## Code Structure

The project structure is organized as follows:

app/
├── src/main/java/com/example/countryapp/
│ ├── adapter/ # RecyclerView Adapter
│ │ └── CountryAdapter.kt
│ ├── api/ # Retrofit API Interface and Factory
│ │ ├── CountryApi.kt
│ │ └── CountryApiFactory.kt
│ ├── model/ # Data Model
│ │ └── Country.kt
│ ├── CustomExceptions/ # Custom Exception Classes
│ │ └── CustomExceptions.kt
│ ├── repository/ # Data Repository
│ │ └── CountryRepository.kt
│ ├── viewmodel/ # ViewModel
│ │ └── CountryViewModel.kt
│ ├── MainActivity.kt # Main Activity
│ └── ...
├── src/main/res/
│ ├── layout/ # Layout Files
│ │ ├── activity_main.xml
│ │ └── country_item.xml
│ └── ...
├── src/test/java/com/example/countryapp/
│ ├── repository/ # Unit Tests for Repository
│ │ └── CountryRepositoryTest.kt
│ └── viewmodel/ # Unit Tests for ViewModel
│ └── CountryViewModelTest.kt
├── build.gradle # App-level Gradle file

## Unit Testing

Unit tests are located in the `src/test/java` directory.
To run the tests, right-click on the `test` directory or a specific test file and select "Run".

## Custom Exception Handling

The app uses custom exceptions to handle different error scenarios:

*   `ApiException`: For errors returned by the API.
*   `NetworkException`: For network-related errors.
*   `DataParsingException`: For errors that occur during data parsing.
*   `UnknownException`: For unexpected errors.

## Device Rotation
Handle the recyclerview state
